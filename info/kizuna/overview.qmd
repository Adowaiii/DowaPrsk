---
title: 絆牌總覽
execute:
  echo: false
  freeze: auto
jupyter: python3

---

<!-- TODO Sticky Header needs to be positioned better -->
<!-- ? Is it possible to still add something in default? Maybe use :before -->

<style>
    .cell-output{width: 400vw;}
</style>
<link rel="stylesheet" href="../projects/twi_JP/style.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,500,1,200" />


```{python}
#| column: screen-inset
%%capture --no-display
import sqlalchemy
import pandas as pd
import numpy as np
import os
from IPython.display import display, Markdown, clear_output
from dotenv import load_dotenv
import urllib
from urllib.parse import quote_plus
from tabulate import tabulate
import json

load_dotenv()
db_password = os.getenv("DB_PASSWORD")
DATABASE_PASSWORD_UPDATED = urllib.parse.quote_plus(db_password)


### Create connection
engine = 'mysql://root:'+DATABASE_PASSWORD_UPDATED+'@localhost:3306/twiJP'
sqlalchemy.create_engine(engine)

### Connect
%reload_ext sql
%sql mysql://root:{DATABASE_PASSWORD_UPDATED}@localhost:3306/twiJP

### Query
result = %sql SELECT * FROM kizuna
df = result.DataFrame()

# Convert it to JSON
data = json.dumps(df.to_dict(orient='records'))

json_dict = json.loads(data)

transformed_data = {}

for entry in json_dict:
  key = f"{entry['Main']}-{entry['Sub']}"
  transformed_data[key] = {
      "rank26": entry["rank26"],
      "rank46": entry["rank46"],
      "rank5": entry["rank5"]
  }

json_data = json.dumps(transformed_data)

# You can write this JSON to a file or embed it directly in HTML
print(json_data)

array = [['' for a in range(27)] for b in range(26)]

characters=['星乃一歌',	'天馬咲希',	'望月穗波',	'日野森志步',	'花里みのり',	'桐谷遥',	'桃井愛莉',	'日野森雫',	'小豆沢こはね',	'白石杏',	'東雲彰人',	'青柳冬弥',	'天馬司',	'鳳えむ',	'草薙寧々',	'神代類',	'宵崎奏',	'朝比奈まふゆ',	'東雲絵名',	'暁山瑞希', '初音ミク', '鏡音リン', '鏡音レン', '巡音ルカ', 'MEIKO', 'KAITO']

```
<div class="area">

  <div class="custom-select"><select onfocus="this.size=5;"
      onblur="this.size=0;"
      onchange="this.size=1; this.blur()" id="character1"></select></div>
  <div class="custom-select"><select onfocus="this.size=5;"
      onblur="this.size=0;"
      onchange="this.size=1; this.blur()" id="character2"></select></div>

<div class="container" id="relationshipInfo"></div>
</div>



<script type="module" src="index.js"></script>

<style>
  /* body {
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
    } */

  select {
    /*appearance: none;
    /* safari 
    -webkit-appearance: none;*/
    padding: 10px 12px;
    border-radius: 8px;
    width:100%;
  }

  .custom-select {
    max-height: 200px;
    min-height: 150px;
    overflow: hidden;
  }

  /*.custom-select::before,
  .custom-select::after {
    --size: 0.3rem;
    position: absolute;
    content: "";
    right: 1rem;
    pointer-events: none;
  }

  .custom-select::before {
    border-left: var(--size) solid transparent;
    border-right: var(--size) solid transparent;
    border-bottom: var(--size) solid black;
    top: 40%;
  }

  .custom-select::after {
    border-left: var(--size) solid transparent;
    border-right: var(--size) solid transparent;
    border-top: var(--size) solid black;
    top: 55%;
  }*/

  option:checked { 
    box-shadow: 0 0 10px 100px #5a5a5a inset;
    color: white;
  }

  option:hover {
    box-shadow: 0 0 10px 100px #B5EAEA inset;
    color: black !important;
  }

  .area {
    display: grid;
    grid-template-columns: minmax(20px, 1fr) minmax(20px, 1fr);
    justify-items: center;
    /*grid-row-gap: 50px;*/
  }


  .container {
    display: grid;
    grid-column: 1 / span 2;
  }


  tbody > tr > td:first-child {
    width: 120px !important;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .rowHeader {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  /* Positioned better */
  tr.header {
    position:sticky;
    top: 0;
  }

  .line:hover {
    display: block;
    width: 100%;
    height:100%;
    background: linear-gradient(
      to top right, transparent calc(50% - 1px), lightgrey , transparent calc(50% + 1px));
  }

  .cell-output {
    width: 90vw;
  }

  .cell-output-display:not(.no-overflow-x){
    overflow-x: visible !important;
  }

  td {
    /* visibility: hidden; */
    padding: 0px !important;
    height: 100px;
    width : 50px !important;
    padding-inline: auto auto;
  }

  th {
    background-color: hsl(154, 65%, 89%);
    user-select: none;
  }

  /* Maybe can use :before to still display somtihing */
  .text {
      display: none;
      text-align: left;
  }

  td:hover{
    width: 450px !important;
    animation: expand 0.5s forwards linear;
  }

  td:hover > .text {
    display: inline;
    visibility: visible;
  }


  @keyframes expand{
    0%{width: 0 50px;}
    25% {width: 0 100px;}
    50%{width: 0 150px;}
    75% {width: 0 200px;}
    100%{width: 0 250px;}
  }


</style>

<script>

    document.addEventListener('contextmenu', function (e) {
        e.preventDefault();
    });

    let parent = document.querySelector('.header').parentElement;

while (parent) {
    const hasOverflow = getComputedStyle(parent).overflow;
    if (hasOverflow !== 'visible') {
        console.log(hasOverflow, parent);
    }
    parent = parent.parentElement;
}

</script>